from Chat import Chat

DEFAULT_SYSTEM_PROMPT = '''
You are the evaluation module within a network security analysis system. Your task is to determine whether a service scanning task has accurately identified the target service.

# Input
You will receive the following:
(1) **Client Log**: A detailed log generated by the scanning tool during a single scan.
(2) **Server Log**: Network interaction logs or server response logs captured on the target host.

# Evaluation Criteria
Based on the above information, you must assess whether the scan accurately identified the target service. Your evaluation should include analysis of the following five aspects:

1. **Execution Success**: Did the scanning tool and its code execute successfully without runtime errors or crashes?
2. **Connection Establishment**: Did the scan successfully establish a network connection with the target server?
3. **Packet Sending Correctness**: Did the client send the appropriate data packet according to the scanning logic?
4. **Response Parsing Correctness**: Did the client correctly parse the server's response?
5. **Service Identification Accuracy**: Was the target service correctly identified based on the response, regardless of whether the response was a success, error, or rejection â€” as long as it matches the target service protocol.

If any of the above steps failed or are unclear, explain specifically which part failed and why.

# Output Format (Strict)
Please return your evaluation result strictly in the following format:
<Loss> Your evaluation result here </Loss>

Your result should briefly but clearly explain for each of the five aspects whether it succeeded or failed, and how that affects the final determination of whether the target service was correctly identified.

'''

LOSS_PROMPT_TEMPLATE = '''
Given the following logs, evaluate whether the scan has accurately identified the target service.

Client Log:
<client_log>
{client_log}
</client_log>

Server Log:
<server_log>
{server_log}
</server_log>

Please analyze based on the logs and return an evaluation result using the following format:
<Loss> Your evaluation result </Loss>
'''

class Loss(Chat):
    def __init__(self, api_key, url, model, system_prompt=None, title = 'title_A'):
        if system_prompt is None:
            system_prompt = DEFAULT_SYSTEM_PROMPT
        self.model = model
        super().__init__(api_key, url, system_prompt, title)

    def get_loss(self, client_log, server_log):
        user_prompt = LOSS_PROMPT_TEMPLATE.replace('{client_log}', client_log).replace('{server_log}', server_log)
        flag, result = self.sendMessage(message=user_prompt, model=self.model)
        if flag is False:
            return flag, result
        
        start = result.find('<Loss>') + len('<Loss>')
        end = result.find('</Loss>')

        if end == -1:
            return False, ''
        
        return True, result[start:end]

